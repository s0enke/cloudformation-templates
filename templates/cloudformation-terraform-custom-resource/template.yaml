---
AWSTemplateFormatVersion: "2010-09-09"

Resources:
  TerraFormExecuteFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import time
          import json
          import cfnresponse
          import subprocess

          def handler(event, context):
              print("Received event: " + json.dumps(event, indent=2))

              subprocess.check_output('curl https://releases.hashicorp.com/terraform/0.10.0/terraform_0.10.0_linux_amd64.zip > /tmp/terraform.zip', shell=True)
              subprocess.check_output('unzip -d /tmp /tmp/terraform.zip', shell=True)
              print(subprocess.check_output('/tmp/terraform version', shell=True))

              if event['RequestType'] == 'Delete':
                  cfnresponse.send(event=event, context=context, responseStatus=cfnresponse.SUCCESS, responseData={})
                  return
              cfnresponse.send(event=event, context=context, responseStatus=cfnresponse.SUCCESS, responseData={})

      Handler: index.handler
      Runtime: python3.6
      Timeout: 300
      Role: !GetAtt TerraFormExecuteFunctionRole.Arn

  TerraFormExecuteFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  TerraFormCustomResource:
    Type: Custom::TerraFormExecute
    Properties:
      ServiceToken: !GetAtt TerraFormExecuteFunction.Arn
      StackName: !Ref AWS::StackName