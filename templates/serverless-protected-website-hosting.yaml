---
AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  Stage:
    Type: String
    Default: prod

Resources:
  ApiGatewayRestApi:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      BinaryMediaTypes:
      - "*/*"
      Name: !Sub "${AWS::StackName}-serverless-protected-website-hosting"
  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiGatewayDeployment4
      RestApiId: !Ref ApiGatewayRestApi
      StageName: !Ref Stage
  ApiGatewayDeployment4:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiGatewayProxyMethodRoot
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: !Ref Stage

  ApiGatewayProxyMethodRoot:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref ApiGatewayAuthorizer
      HttpMethod: GET
      ResourceId: !GetAtt ApiGatewayRestApi.RootResourceId
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        Type: HTTP_PROXY
        Uri: https://ruempler.eu/
        IntegrationHttpMethod: GET

  ApiGatewayProxyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: "{proxy+}"
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayProxyMethodCatchall:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref ApiGatewayAuthorizer
      HttpMethod: GET
      ResourceId: !Ref ApiGatewayProxyResource
      RestApiId: !Ref ApiGatewayRestApi
      RequestParameters:
        method.request.path.proxy: true
      Integration:
        Type: HTTP_PROXY
        Uri: "https://ruempler.eu/{proxy}/" # https://forums.aws.amazon.com/message.jspa?messageID=749625
        IntegrationHttpMethod: GET
        RequestParameters:
          integration.request.path.proxy: "method.request.path.proxy"

  ApiGatewayAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      AuthorizerCredentials: !GetAtt ApiGatewayAuthorizerRole.Arn
      AuthorizerResultTtlInSeconds: "300"
      AuthorizerUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiGatewayAuthorizerFunction.Arn}/invocations"
      Type: "TOKEN"
      IdentitySource: "method.request.header.Authorization"
      Name: "DefaultAuthorizer"
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayAuthorizerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: apigateway.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: lambda
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: lambda:InvokeFunction
            Resource: !GetAtt ApiGatewayAuthorizerFunction.Arn

  ApiGatewayAuthorizerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  ApiGatewayAuthorizerFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3

          def handler(event, context):
            basic_auth_decoded = base64.standard_b64decode(event['authorizationToken'].split(' ')[1]).decode()
            username, password = basic_auth_decoded.split(':')
            if username == 'sfd' and password == 'zsfg':
              return generatePolicy('user', 'Allow', event['methodArn'])
            else:
              return generatePolicy('user', 'Deny', event['methodArn'])

          def generatePolicy(principalId, effect, resource):
            return {
              'principalId': principalId,
              'policyDocument': {
                'Version': '2012-10-17',
                'Statement': [{
                  'Action': 'execute-api:Invoke',
                  'Effect': effect,
                  'Resource': resource
                }]
              }
            }



      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt ApiGatewayAuthorizerFunctionRole.Arn
      Runtime: python3.6
      Timeout: 5


Outputs:
  ApiGatewayURL:
    Value: !Sub "https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/"